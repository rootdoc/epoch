contract Oracles =

  type fee = int
  type ttl = int

  type query_t  = string
  type answer_t = int

  type oracle_id = oracle(query_t, answer_t)
  type query_id  = oracle_query(query_t, answer_t)

  function registerOracle(acct : address,
                          sign : signature,   // Signed account address
                          fee  : fee,
                          qfee : ttl,
                          ttl  : ttl) : oracle_id =
     Oracle.register(acct, sign, fee, qfee, ttl)

  function queryFee(o : oracle_id) : fee =
    Oracle.query_fee(o)

  function createQuery(o    : oracle_id,
                       q    : query_t,
                       fee  : fee,
                       qttl : ttl,
                       rttl : ttl) : query_id =
    Oracle.query(o, q, fee, qttl, rttl)

  function extendOracle(o    : oracle_id,
                        sign : signature,   // Signed oracle address
                        fee  : fee,
                        ttl  : ttl) : () =
    Oracle.extend(o, sign, fee, ttl)

  function respond(o    : oracle_id,
                   q    : query_id,
                   sign : signature,
                   r    : answer_t) =
    Oracle.respond(o, q, sign, r)

  function getQuestion(o : oracle_id,
                       q : query_id) : query_t =
    Oracle.get_question(o, q)

  function hasAnswer(o : oracle_id,
                     q : query_id) =
    switch(Oracle.get_answer(o, q))
      None    => false
      Some(_) => true

  function getAnswer(o : oracle_id,
                     q : query_id) : option(answer_t) =
    Oracle.get_answer(o, q)

  datatype complexQuestion = Why(int) | How(string)
  datatype complexAnswer   = NoAnswer | Answer(complexQuestion, string, int)

  function complexOracle(question, sig) =
    let o = Oracle.register(Contract.address, sig, 0, 0, 1000) : oracle(complexQuestion, complexAnswer)
    let q = Oracle.query(o, question, 0, 100, 100)
    Oracle.respond(o, q, sig, Answer(question, "magic", 1337))
    Oracle.get_answer(o, q)

